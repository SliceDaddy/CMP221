/
  public Date(int month, int day, int year) {

  }

  
  public Date(String s) {
try{
int i1 = indexof('/');
int i2 = indexof()
  }

 
  public static boolean isLeapYear(int year) {
     return year%400 ==0;                       
  }

  
  
  public static int daysInMonth(int month, int year) {
    if(!isLeapYear(year))
      return A[month -1};
      else{// is a leap year
        if(month==2)
          return 29;
        else 
          return A[month -1];
    return 0;                          
  }

  
  public static boolean isValidDate(int month, int day, int year) {
    return true;                        // replace this line with your solution
  }

  
  public String toString() {
    return "stuff";                     // replace this line with your solution
  }

  
  public boolean isBefore(Date d) {
    if(y<d.y)
      return true;
    else if(y>d.y)
      return false;
      
  }

  
  public boolean isAfter(Date d) {
                          
  }
 
  
  public int dayInYear() {
      return 365 = (isLeapYear(this.y)?1:0);
    
                              
  }

  
  public int difference(Date d) {
      if(isBefore(d))
       return myDiff( new Date(this.toString()),d);
      else
       return -myDiff(d, new Date(this.toString()));
    
  }
  pivate int myDiff(Date a, Date b){
  //assume a is ahead of b
     return 365 = (isLeapYear(this.y)?1:0); int result =0;
      for(int yy - a.y+1;yy<b.y;yy++)
        result += 365 + (isLeapYear(yy)?1:0?
      if(a.y != b.y){
          b.y - a.y+1;
          result += myDiff(a, new date (12,31,a.y)) + 1 + myDiff(1,1,b.y, b);
      }else{
          for(int mm= a.m+1;mm<b.m;mm++){
            result += A[mm-1];
            if(isLeapYear(a.y) && mm==2
                result++
          }
        if(a.m == b.m)
            result += b.d-a.d;
        else{
          result += b.d + A[a.m-1] -a.d;
            if(isLaepYear(a.y) && a.m == 2)
              result++;
              }
      }
      return result;
  }
